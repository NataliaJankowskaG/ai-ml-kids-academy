import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import json
from streamlit_lottie import st_lottie
from openai import OpenAI
from gtts import gTTS
import io
import random
import time

st.set_page_config(
    page_title="¬øQu√© es EDA?",
    layout="wide"
)

# ---- Funci√≥n para cargar animaci√≥n Lottie desde un archivo local ----
def load_lottiefile(filepath: str):
    try:
        with open(filepath, "r", encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"Error: No se encontr√≥ el archivo Lottie en la ruta: {filepath}")
        return None
    except json.JSONDecodeError:
        st.error(f"Error: El archivo Lottie '{filepath}' no es un JSON v√°lido o est√° corrupto.")
        return None
    except Exception as e:
        st.error(f"Error inesperado al cargar el archivo Lottie '{filepath}': {e}. Aseg√∫rate de que el archivo no est√© corrupto y sea un JSON v√°lido.")
        return None

# --- Rutas a Lottie ---
LOTTIE_SHIP_PATH = os.path.join("assets", "lottie_animations", "ship.json")
LOTTIE_MAGNIFY_PATH = os.path.join("assets", "lottie_animations", "magnifying_glass.json")
LOTTIE_DATA_ORG_PATH = os.path.join("assets", "lottie_animations", "data_organization.json")

# --- Ruta a la imagen del Titanic local ---
TITANIC_IMAGE_PATH = os.path.join("assets", "imagenes", "Titanic.jpg")


# --- Configuraci√≥n de la API de OpenAI ---
try:
    openai_api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    openai_api_key = None
    st.warning("Advertencia: La clave de la API de OpenAI no est√° configurada en `secrets.toml`. El chatbot Eddy no funcionar√°.")

client = OpenAI(api_key=openai_api_key) if openai_api_key else None


# Inicializar o cargar el dataset del Titanic en session_state
# SIN RENOMBRAR COLUMNAS
if 'original_titanic_df' not in st.session_state:
    df_raw = sns.load_dataset('titanic').copy()
    st.session_state.original_titanic_df = df_raw.copy()
    st.session_state.titanic_df = st.session_state.original_titanic_df.copy()
    st.session_state.eda_steps_applied = [] # Para registrar los pasos aplicados

st.subheader("¬°Prep√°rate para la aventura de los datos!")

st.write("---")

# Secci√≥n 1: Introducci√≥n: La Aventura del Titanic y los Datos
st.header("üõ≥Ô∏è La Gran Aventura del Titanic: ¬°Un Tesoro de Datos Espera!")
st.markdown("""
Imagina un barco gigante, el **Titanic**, que zarp√≥ hace mucho tiempo.
A bordo iban muchas personas: familias, amigos, aventureros...
Cada persona en el barco es como una pieza de informaci√≥n, un **dato**.
¬°Y todos esos datos juntos nos cuentan una historia!

Pero, ¬°cuidado! Los datos pueden estar un poco desordenados, como un mapa del tesoro al que le faltan pedazos o est√° un poco borroso.
Nuestra misi√≥n hoy es ser **detectives de datos** para explorar, limpiar y entender ese tesoro.
""")

col_intro_left, col_intro_right = st.columns([1, 1])
with col_intro_left:
    lottie_ship = load_lottiefile(LOTTIE_SHIP_PATH)
    if lottie_ship:
        st_lottie(lottie_ship, height=200, width=200, key="titanic_intro")
    else:
        st.info("Consejo: Descarga una animaci√≥n de barco (ej. 'ship.json') de LottieFiles.com y ponla en 'assets/lottie_animations/'.")
with col_intro_right:
    st.image(TITANIC_IMAGE_PATH, caption="El famoso barco Titanic", width=300)
    st.markdown("¬°Nuestro objetivo no es el viaje, sino los **datos** que nos dej√≥!")

st.write("---")

# Secci√≥n 2: ¬øQu√© es EDA? Explorar, Limpiar, Entender para el Titanic
st.header("üïµÔ∏è‚Äç‚ôÇÔ∏è Eddy el Explorador: ¬°Nuestra Misi√≥n de Datos!")
st.markdown("""
**EDA** significa **An√°lisis de Datos Exploratorio** (o como Eddy lo llama: **E**xplorar **D**atos **A** fondo).
Es como ponerse las gafas de detective y una lupa para entender bien la informaci√≥n.

Eddy nos ense√±ar√° tres cosas s√∫per importantes:
1.  **Explorar:** Mirar los datos por primera vez. ¬øCu√°ntas personas hab√≠a? ¬øDe qu√© edad?
2.  **Limpiar:** ¬°A veces los datos est√°n sucios! Faltan datos o tienen errores. Tenemos que arreglarlos.
3.  **Entender:** ¬øQu√© descubrimos despu√©s de limpiar? ¬øHay patrones escondidos?

¬°Es una parte crucial para que los modelos de IA puedan predecir el futuro con la informaci√≥n del pasado!
""")

col_eda_concept_left, col_eda_concept_right = st.columns([1, 1])
with col_eda_concept_left:
    lottie_magnify = load_lottiefile(LOTTIE_MAGNIFY_PATH)
    if lottie_magnify:
        st_lottie(lottie_magnify, height=180, width=180, key="eda_magnify")
    
with col_eda_concept_right:
    lottie_data_org = load_lottiefile(LOTTIE_DATA_ORG_PATH)
    if lottie_data_org:
        st_lottie(lottie_data_org, height=180, width=180, key="eda_organization")
    
st.write("---")

# --- Secci√≥n 3: ¬°Manos a la Obra! El Laboratorio de Datos del Titanic ---
st.header("Tu Laboratorio a Bordo del Titanic: ¬°A Limpiar y Descubrir!")
st.markdown("""
¬°Vamos a trabajar con los datos reales del Titanic! Pero no te preocupes, nos centraremos en los n√∫meros
y categor√≠as para aprender sobre las personas a bordo y c√≥mo viv√≠an esa experiencia.
""")

st.markdown("### Datos Crudos del Titanic: ¬°Mira el Tesoro sin Limpiar!")
st.markdown("""
Aqu√≠ tienes las primeras filas de los datos del Titanic.
¬øVes algo raro? Algunas columnas tienen informaci√≥n, otras no...
""")
st.dataframe(st.session_state.titanic_df.head())

st.markdown("---")

st.subheader("Desaf√≠o 1: ¬°Datos Faltantes! ¬øQui√©n no tiene edad registrada?")
st.markdown("""
¬°Uff! Parece que a algunas personas les falta la edad en nuestros datos.
Un **dato faltante** es como una pieza que falta en nuestro rompecabezas.
Si no lo arreglamos, el modelo predictivo podr√≠a confundirse.

Mira cu√°ntos datos faltan en cada columna:
""")
missing_data_info = st.session_state.titanic_df.isnull().sum()
# Filtrar solo columnas con datos faltantes y mostrarlas
missing_df = missing_data_info[missing_data_info > 0].reset_index().rename(columns={'index': 'Columna', 0: 'Datos Faltantes'})
if not missing_df.empty:
    st.dataframe(missing_df)
else:
    st.info("¬°Enhorabuena! No hay datos faltantes en este momento.")


if 'age' in st.session_state.titanic_df.columns and st.session_state.titanic_df['age'].isnull().sum() > 0:
    st.markdown("""
    La columna 'age' tiene muchos datos faltantes. ¬øQu√© hacemos con ellos?
    """)
    age_missing_option = st.radio(
        "Elige una opci√≥n para la Edad:",
        ("Dejar los datos faltantes tal cual (¬°no recomendado!)",
         "Eliminar las filas donde falta la Edad",
         "Rellenar las Edades que faltan con la edad promedio",
         "Rellenar las Edades que faltan con la edad m√°s com√∫n (moda)"),
        key="age_missing_radio"
    )

    if st.button("Aplicar Opci√≥n para la Edad", key="apply_age_missing"):
        df_copy = st.session_state.titanic_df.copy()
        if age_missing_option == "Eliminar las filas donde falta la Edad":
            original_rows = len(df_copy)
            df_copy.dropna(subset=['age'], inplace=True)
            removed_rows = original_rows - len(df_copy)
            st.session_state.eda_steps_applied.append(f"Eliminadas {removed_rows} filas con Edad faltante.")
            st.success(f"¬°Filas con Edad faltante eliminadas! ({removed_rows} filas menos)")
        elif age_missing_option == "Rellenar las Edades que faltan con la edad promedio":
            mean_age = df_copy['age'].mean()
            df_copy['age'].fillna(mean_age, inplace=True)
            st.session_state.eda_steps_applied.append(f"Edades faltantes rellenadas con el promedio ({mean_age:.2f}).")
            st.success(f"¬°Edades faltantes rellenadas con el promedio: {mean_age:.2f}!")
        elif age_missing_option == "Rellenar las Edades que faltan con la edad m√°s com√∫n (moda)":
            mode_age = df_copy['age'].mode()[0]
            df_copy['age'].fillna(mode_age, inplace=True)
            st.session_state.eda_steps_applied.append(f"Edades faltantes rellenadas con la edad m√°s com√∫n ({mode_age}).")
            st.success(f"¬°Edades faltantes rellenadas con la edad m√°s com√∫n: {mode_age}!")
        else:
            st.info("No se realiz√≥ ning√∫n cambio en los datos de Edad faltantes.")
            st.session_state.eda_steps_applied.append("Edad faltante no manipulada.")
        
        st.session_state.titanic_df = df_copy
        st.markdown("#### ¬°As√≠ se ven los datos de Edad despu√©s de tu elecci√≥n!:")
        fig_age, ax_age = plt.subplots()
        sns.histplot(st.session_state.titanic_df['age'].dropna(), kde=True, ax=ax_age)
        ax_age.set_title('Distribuci√≥n de la Edad')
        ax_age.set_xlabel('Edad')
        ax_age.set_ylabel('Frecuencia')
        st.pyplot(fig_age)
        plt.close(fig_age)
        st.rerun()
else:
    st.info("¬°Bien! No hay datos faltantes en la columna 'age'. ¬°Puedes pasar al siguiente desaf√≠o!")

st.markdown("---")

st.subheader("Desaf√≠o 2: ¬°Columnas Innecesarias! ¬øQu√© informaci√≥n nos distrae?")
st.markdown("""
Algunas columnas tienen informaci√≥n que no ayuda a entender los patrones o a hacer predicciones,
¬°son como adornos que nos distraen! Por ejemplo, el nombre de cada pasajero ('name')
o su n√∫mero de identificaci√≥n ('passengerId') no nos dicen si sobrevivieron o no en general.
Tambi√©n 'deck' tiene demasiados datos faltantes y 'embark_town' es redundante con 'embarked'.
""")

# Crear una lista de columnas que se pueden eliminar, filtrando las que ya no existen
available_cols_to_drop = [
    col for col in ['deck', 'embark_town', 'passengerId', 'name', 
                    'who', 'adult_male', 'alone', 'alive', 'class'] 
    if col in st.session_state.titanic_df.columns
]

if available_cols_to_drop:
    cols_to_drop = st.multiselect(
        "Elige las columnas que crees que no son √∫tiles para analizar o predecir:",
        available_cols_to_drop,
        default=[col for col in ['deck', 'embark_town', 'passengerId', 'name', 
                                  'who', 'adult_male', 'alone', 'alive', 'class']
                  if col in available_cols_to_drop], 
        key="cols_to_drop_multiselect"
    )

    if st.button("Eliminar Columnas Seleccionadas", key="apply_drop_cols"):
        df_copy = st.session_state.titanic_df.copy()
        initial_cols = set(df_copy.columns)
        
        cols_to_drop_existing = [col for col in cols_to_drop if col in df_copy.columns]

        if cols_to_drop_existing:
            df_copy.drop(columns=cols_to_drop_existing, inplace=True, errors='ignore')
            final_cols = set(df_copy.columns)
            dropped_actual = initial_cols - final_cols
            
            if dropped_actual:
                st.session_state.eda_steps_applied.append(f"Columnas eliminadas: {', '.join(dropped_actual)}.")
                st.success(f"¬°Columnas {', '.join(dropped_actual)} eliminadas con √©xito!")
            else:
                st.info("No se elimin√≥ ninguna columna nueva o las seleccionadas ya no exist√≠an.")
        else:
            st.info("Por favor, selecciona al menos una columna para eliminar.")

        st.session_state.titanic_df = df_copy
        st.rerun()

    st.markdown("#### ¬°As√≠ se ven los datos sin las columnas que has elegido!:")
    st.dataframe(st.session_state.titanic_df.head())
else:
    st.info("¬°Ya no quedan columnas obvias para eliminar! ¬°Buen trabajo!")

st.markdown("---")

st.subheader("Desaf√≠o 3: ¬°Datos Categ√≥ricos! ¬øC√≥mo hablamos con las m√°quinas?")
st.markdown("""
Nuestros modelos de IA son muy listos, ¬°pero les encantan los n√∫meros!
Algunas columnas como 'sex' (g√©nero: male/female) o 'embarked' (puerto de embarque) tienen palabras.
Necesitamos convertirlas a n√∫meros para que el modelo las entienda.
""")

if 'sex' in st.session_state.titanic_df.columns and st.session_state.titanic_df['sex'].dtype == 'object':
    st.markdown("""
    La columna de g√©nero tiene 'male' - hombre y 'female'' - mujer. ¬øQu√© n√∫mero le asignamos a cada uno?
    """)
    if st.button("Convertir g√©nero a n√∫meros (0 y 1)", key="convert_gender_to_numbers"):
        df_copy = st.session_state.titanic_df.copy()
        df_copy['sex'] = df_copy['sex'].map({'male': 0, 'female': 1})
        st.session_state.titanic_df = df_copy
        st.session_state.eda_steps_applied.append("Columna de g√©nero convertida a n√∫meros (0='male', 1='female').")
        st.success("¬°Columna de g√©nero convertida a n√∫meros! (male=0, female=1)")
        st.rerun()
else:
    if 'sex' in st.session_state.titanic_df.columns:
        st.info("La columna de g√©nero ya est√° en formato num√©rico.")
    else:
        st.info("La columna de g√©nero no est√° presente en tus datos.")

# Columna 'embarked'
if 'embarked' in st.session_state.titanic_df.columns and st.session_state.titanic_df['embarked'].dtype == 'object':
    st.markdown("""
    La columna 'embarked' (puerto de embarque) tiene las iniciales de los puertos de embarque. ¬øLa convertimos a n√∫meros?
    (Necesitamos rellenar los pocos datos faltantes primero, para no perderlos en la conversi√≥n).
    """)
    if st.button("Rellenar y Convertir 'embarked' a n√∫meros", key="convert_embarked_to_numbers"):
        df_copy = st.session_state.titanic_df.copy()
        most_common_embark = df_copy['embarked'].mode()[0]
        df_copy['embarked'].fillna(most_common_embark, inplace=True)
        df_copy['embarked'] = df_copy['embarked'].astype('category').cat.codes
        st.session_state.titanic_df = df_copy
        st.session_state.eda_steps_applied.append("Columna 'embarked' rellenada y convertida a n√∫meros.")
        st.success("¬°Columna 'embarked' rellenada y convertida a n√∫meros!")
        st.rerun()
else:
    if 'embarked' in st.session_state.titanic_df.columns:
        st.info("La columna 'embarked' ya est√° en formato num√©rico.")
    else:
        st.info("La columna 'embarked' no est√° presente en tus datos.")

st.markdown("#### ¬°As√≠ se ven los datos con tus conversiones!:")
st.dataframe(st.session_state.titanic_df.head())

st.markdown("---")

st.subheader("Desaf√≠o 4: ¬°Visualizaci√≥n para Entender! ¬øQu√© nos cuentan los gr√°ficos?")
st.markdown("""
Ahora que nuestros datos est√°n m√°s limpios, podemos hacer gr√°ficos para descubrir patrones.
¬°Los gr√°ficos son como las fotos del tesoro que estamos buscando!
""")

# Gr√°fico 1: Supervivencia por G√©nero
if 'sex' in st.session_state.titanic_df.columns and 'survived' in st.session_state.titanic_df.columns:
    st.markdown("**1. Supervivencia por G√©nero:**")
    df_plot_gender = st.session_state.titanic_df.copy()
    if df_plot_gender['sex'].dtype in ['int64', 'float64', 'int8']:
        df_plot_gender['sex_label'] = df_plot_gender['sex'].map({0: 'male', 1: 'female'})
    else:
        df_plot_gender['sex_label'] = df_plot_gender['sex']

    fig_gender_survived, ax_gender_survived = plt.subplots()
    sns.countplot(data=df_plot_gender, x='sex_label', hue='survived', ax=ax_gender_survived, palette='viridis')
    ax_gender_survived.set_title('Supervivencia por G√©nero')
    ax_gender_survived.set_xlabel('G√©nero')
    ax_gender_survived.set_ylabel('N√∫mero de Pasajeros')
    ax_gender_survived.legend(title='Sobrevivi√≥', labels=['No', 'S√≠'])
    st.pyplot(fig_gender_survived)
    plt.close(fig_gender_survived)
    st.markdown("¬øQu√© observas? ¬øParece que un g√©nero tuvo m√°s probabilidades de sobrevivir que el otro?")
else:
    st.info("Las columnas 'sex' o 'survived' no est√°n disponibles para el gr√°fico de Supervivencia por Sexo.")

# Gr√°fico 2: Supervivencia por Clase de Billete
if 'pclass' in st.session_state.titanic_df.columns and 'survived' in st.session_state.titanic_df.columns:
    st.markdown("**2. Supervivencia por Clase de Billete:**")
    fig_pclass_survived, ax_pclass_survived = plt.subplots()
    sns.countplot(data=st.session_state.titanic_df, x='pclass', hue='survived', ax=ax_pclass_survived, palette='magma')
    ax_pclass_survived.set_title('Supervivencia por Clase de Billete (1=Primera, 2=Segunda, 3=Tercera)')
    ax_pclass_survived.set_xlabel('Clase de Billete')
    ax_pclass_survived.set_ylabel('N√∫mero de Pasajeros')
    ax_pclass_survived.legend(title='Sobrevivi√≥', labels=['No', 'S√≠'])
    st.pyplot(fig_pclass_survived)
    plt.close(fig_pclass_survived)
    st.markdown("¬øQu√© clase de billete parece que ten√≠a m√°s probabilidad de sobrevivir?")
else:
    st.info("Las columnas 'pclass' o 'survived' no est√°n disponibles para el gr√°fico de Supervivencia por Clase de Billete.")

# Gr√°fico 3: Edad vs. Tarifa del Billete (Supervivencia)
if all(col in st.session_state.titanic_df.columns for col in ['age', 'fare', 'survived']):
    st.markdown("**3. Edad vs. Tarifa del Billete (Color por Supervivencia):**")

    # Crear una copia para mapear 'survived' a texto para la visualizaci√≥n
    df_plot = st.session_state.titanic_df.copy()
    df_plot['survived_label'] = df_plot['survived'].map({0: 'No', 1: 'S√≠'})

    fig_age_fare_survived, ax_age_fare_survived = plt.subplots(figsize=(10, 6))

    sns.scatterplot(
        data=df_plot,
        x='age',
        y='fare',
        hue='survived_label',
        palette={'No': 'coral', 'S√≠': 'cornflowerblue'},
        alpha=0.7,
        s=80,
        ax=ax_age_fare_survived
    )

    ax_age_fare_survived.set_title('Edad vs. Tarifa del Billete (Color por Supervivencia)', fontsize=16)
    ax_age_fare_survived.set_xlabel('Edad', fontsize=12)
    ax_age_fare_survived.set_ylabel('Tarifa del Billete', fontsize=12)

    handles, labels = ax_age_fare_survived.get_legend_handles_labels()

    if handles and labels:
        if ax_age_fare_survived.legend_ is not None:
             ax_age_fare_survived.legend_.remove()

        legend = ax_age_fare_survived.legend(
            handles=handles,
            labels=labels,
            title='Sobrevivi√≥',
            loc='upper right',
            markerscale=2,
            handletextpad=1.0,
            labelspacing=0.7,
            frameon=True,
            edgecolor='black',
            facecolor='white',
            borderpad=0.5
        )

        plt.setp(legend.get_title(), fontsize='12')
        for text in legend.get_texts():
            text.set_fontsize('12')
    else:
        st.warning("No se pudieron obtener los handles o labels para la leyenda.")

    st.pyplot(fig_age_fare_survived)
    plt.close(fig_age_fare_survived)
    st.markdown("¬øHay alguna relaci√≥n entre la Edad, el precio del billete y la supervivencia? Por ejemplo, ¬ølos m√°s j√≥venes o los que pagaron m√°s tuvieron m√°s suerte?")
else:
    st.info("Algunas de las columnas 'age', 'fare' o 'survived' no est√°n disponibles para este gr√°fico (quiz√°s las eliminaste).")

st.markdown("---")

st.subheader("¬°El Estado Actual de Tus Datos del Titanic Despu√©s de tu EDA!")
st.markdown("Has explorado y limpiado los datos. ¬°As√≠ es como se ven ahora las primeras filas y su informaci√≥n general!")
st.dataframe(st.session_state.titanic_df.head())
st.markdown("**Informaci√≥n de las columnas (Tipos de datos y conteo de no-nulos):**")
buffer = io.StringIO()
st.session_state.titanic_df.info(buf=buffer)
s = buffer.getvalue()
st.text(s)

# --- INICIO DE LA EXPLICACI√ìN PARA NI√ëOS de df.info---
st.markdown("---")

st.markdown("### ¬øQu√© significan estos datos tan 'raros'?")
st.markdown("""
¬°No te preocupes si la tabla de arriba parece un poco t√©cnica! Te voy a explicar qu√© significa
cada parte de forma sencilla, ¬°como si fuera una ficha de tus personajes favoritos!

Imagina que estos datos son como una lista s√∫per detallada de todos los pasajeros del Titanic.
Cada fila es una persona, y cada **'columna'** (o dato) nos cuenta algo sobre ella.

Aqu√≠ te explico lo m√°s importante:
""")

with st.expander("Haz clic aqu√≠ para entender las columnas (¬°las fichas de cada pasajero!)"):
    st.markdown("""
    * **`<class 'pandas.core.frame.DataFrame'>`**:
        * Piensa que es como si te dijeran: "¬°Eh, esto es una tabla de datos muy organizada!". Es el tipo de 'cuaderno' donde guardamos toda la informaci√≥n.

    * **`RangeIndex: 891 entries, 0 to 890`**:
        * Esto significa que tienes **891 pasajeros** en total en esta lista (desde el n√∫mero 0 hasta el 890). ¬°Como tener 891 cromos diferentes!

    * **`Data columns (total 10 columns):`**:
        * Nos dice que en tu lista hay **10 tipos diferentes de informaci√≥n** sobre cada pasajero (o sea, 10 columnas). Por ejemplo, una columna para su edad, otra para si sobrevivi√≥, etc.

    * **# Column (Nombre del Dato)**:
        * Esta es la etiqueta que le hemos puesto a cada tipo de informaci√≥n. ¬°Es el nombre de la caracter√≠stica que estamos viendo!

    * **Non-Null Count (Cu√°ntos Datos Completos)**:
        * Esto es s√∫per importante. Significa cu√°ntos pasajeros tienen esa informaci√≥n **completa y sin errores**. Si ves "891 non-null", ¬°significa que tenemos el dato para TODOS los 891 pasajeros! Si hay menos, es que a algunos les falta ese dato.

    * **Dtype (Tipo de Dato)**:
        * Esto nos dice qu√© tipo de informaci√≥n es:
            * **`int64`**: ¬°Son **n√∫meros enteros**! Como tu edad, o el n√∫mero de hermanos que tienes. Son n√∫meros que no tienen decimales (1, 2, 3...).
            * **`float64`**: ¬°Son **n√∫meros con decimales**! Como el precio de un billete (25.50 euros) o tu altura (1.45 metros).
            * **`category`**: Son datos que entran en **categor√≠as fijas**. Por ejemplo, para la columna 'sexo' ser√≠a 'hombre' o 'mujer'. O para la 'clase' del billete, ser√≠a 'primera', 'segunda' o 'tercera'. ¬°No son n√∫meros que podamos sumar, sino etiquetas!
            * **`object`**: Puede ser **texto** (como nombres o descripciones) o datos m√°s complejos. Aqu√≠ para 'alive' ser√≠a 'yes' o 'no'.

    * **`memory usage: 57.7+ KB`**:
        * Esto es como el 'tama√±o' del cuaderno de datos en la memoria del ordenador. Nos dice cu√°nto espacio est√° usando.

    **¬°En resumen, esta informaci√≥n nos ayuda a saber qu√© tipo de datos tenemos en cada columna y si est√°n todos los datos completos para que podamos usarlos bien!**
    """)

if st.button("Reiniciar Laboratorio de Datos del Titanic", key="reset_eda_lab_final"):
    df_raw = sns.load_dataset('titanic').copy()
    st.session_state.original_titanic_df = df_raw.copy()
    st.session_state.titanic_df = st.session_state.original_titanic_df.copy()
    st.session_state.eda_steps_applied = []
    st.success("¬°Laboratorio de datos reiniciado a su estado original!")
    st.rerun()

st.write("---")

# --- Secci√≥n de Chatbot de Juego con Eddy el Explorador ---
st.header("¬°Juega y Aprende con Eddy el Explorador sobre EDA!")
st.markdown("¬°Hola! Soy Eddy, tu gu√≠a en el mundo de los datos. ¬øListo para probar tus habilidades como explorador?")

if client:
    # Inicializa el estado del juego y los mensajes del chat
    if "eda_game_active" not in st.session_state:
        st.session_state.eda_game_active = False
    if "eda_game_messages" not in st.session_state:
        st.session_state.eda_game_messages = []
    if "eda_current_question" not in st.session_state:
        st.session_state.eda_current_question = None
    if "eda_current_options" not in st.session_state:
        st.session_state.eda_current_options = {}
    if "eda_correct_answer" not in st.session_state:
        st.session_state.eda_correct_answer = None
    if "eda_awaiting_next_game_decision" not in st.session_state:
        st.session_state.eda_awaiting_next_game_decision = False
    if "eda_game_needs_new_question" not in st.session_state:
        st.session_state.eda_game_needs_new_question = False
    if "eda_correct_streak" not in st.session_state:
        st.session_state.eda_correct_streak = 0


    # System prompt para el juego de preguntas de Eddy el Explorador
    eda_game_system_prompt = f"""
    Eres un **experto consumado en An√°lisis Exploratorio de Datos (EDA) y Visualizaci√≥n**, con una profunda comprensi√≥n de las metodolog√≠as, herramientas y mejores pr√°cticas para extraer insights de los datos. Tu misi√≥n es actuar como un **tutor interactivo y desafiante**, guiando a los usuarios a trav√©s del dominio del EDA mediante un **juego de preguntas adaptativo**. Tu lenguaje y la complejidad de las preguntas deben ajustarse rigurosamente al nivel actual del usuario, alcanzando un tono y contenido de **nivel universitario/bootcamp** para los usuarios m√°s avanzados.

    **TU √öNICO TRABAJO es generar preguntas y respuestas en un formato espec√≠fico y estricto, y NADA M√ÅS.**
    **¬°Es CR√çTICO que tus preguntas sean MUY VARIADAS, CREATIVAS Y NO REPETITIVAS! Evita patrones de preguntas obvios o que sigan la misma estructura.**

    **Cuando te pida una pregunta, responde EXCLUSIVAMENTE con el siguiente formato, y NADA M√ÅS:**
    Pregunta: [Tu pregunta aqu√≠]
    A) [Opci√≥n A]
    B) [Opci√≥n B]
    C) [Opci√≥n C]
    RespuestaCorrecta: [A, B o C]

    **Cuando te pida feedback, responde EXCLUSIVAMENTE con el siguiente formato, y NADA M√ÅS:**
    [Mensaje de Correcto/Incorrecto, ej: "¬°Excelente insight! Has interpretado los datos con precisi√≥n." o "Revisa tu exploraci√≥n. Esa conclusi√≥n no se deriva de los datos."]
    [Breve explicaci√≥n del concepto, adecuada al nivel del usuario, ej: "El EDA es el paso inicial para comprender las caracter√≠sticas principales de un conjunto de datos..."]
    [Pregunta para continuar, ej: "¬øListo para descubrir m√°s patrones ocultos en los datos?" o "¬øQuieres profundizar en las t√©cnicas avanzadas de visualizaci√≥n?"]

    **Reglas adicionales para el Experto en An√°lisis Exploratorio de Datos:**
    * **Enfoque Riguroso en EDA:** Todas tus preguntas y explicaciones deben girar en torno al An√°lisis Exploratorio de Datos. Cubre sus fundamentos (definici√≥n, objetivos, importancia), t√©cnicas para datos univariados y multivariados, manejo de datos faltantes y at√≠picos, visualizaci√≥n de datos (tipos de gr√°ficos, cu√°ndo usar cada uno), estad√≠sticas descriptivas, identificaci√≥n de patrones, relaciones y anomal√≠as, y la preparaci√≥n de datos para el modelado.
    * **¬°VARIEDAD, VARIEDAD, VARIEDAD!** Aseg√∫rate de que cada pregunta sea diferente en su formulaci√≥n, el ejemplo que utiliza y el concepto espec√≠fico de EDA que eval√∫a. Rota entre los siguientes subtemas, asegurando una cobertura amplia y equilibrada:
        * **Concepto General y Objetivos del EDA:** ¬øQu√© es EDA? Por qu√© es crucial antes del modelado, objetivos principales (entender datos, identificar problemas, generar hip√≥tesis).
        * **Estad√≠sticas Descriptivas:** Medidas de tendencia central (media, mediana, moda), dispersi√≥n (varianza, desviaci√≥n est√°ndar, rango intercuart√≠lico), asimetr√≠a y curtosis.
        * **Tipos de Datos y Escalas:** Cuantitativos (continuos, discretos), cualitativos (nominales, ordinales) y su impacto en el an√°lisis.
        * **Manejo de Datos Faltantes (Missing Values):** Detecci√≥n, estrategias de imputaci√≥n (media, mediana, moda, regresi√≥n), impacto en el an√°lisis.
        * **Detecci√≥n y Tratamiento de Outliers (Valores At√≠picos):** M√©todos de detecci√≥n (IQR, Z-score), estrategias de tratamiento (eliminaci√≥n, transformaci√≥n, capping).
        * **Visualizaci√≥n de Datos:**
            * **Univariada:** Histogramas, box plots, gr√°ficos de densidad, gr√°ficos de barras.
            * **Bivariada:** Scatter plots, heatmaps, pair plots, gr√°ficos de l√≠neas (para series temporales).
            * **Multivariada:** Gr√°ficos 3D, facetado, uso de colores/tama√±os.
            * **Principios de buena visualizaci√≥n:** Claridad, elecci√≥n del gr√°fico adecuado, evitar gr√°ficos enga√±osos.
        * **Identificaci√≥n de Patrones y Relaciones:** Correlaci√≥n (Pearson, Spearman), causalidad vs. correlaci√≥n, clustering (como t√©cnica exploratoria).
        * **Preparaci√≥n de Datos para el Modelado:** Imputaci√≥n, escalado/normalizaci√≥n, codificaci√≥n de variables categ√≥ricas (One-Hot, Label Encoding).
        * **Herramientas para EDA:** Librer√≠as comunes (Pandas, Matplotlib, Seaborn) y su aplicaci√≥n.

    * **Progreso de Dificultad y Tono (Crucial):** El usuario ha respondido {st.session_state.adivino_correct_streak} preguntas correctas consecutivas.
        * **Nivel 1 (Explorador de Datos Principiante ‚Äì 0-2 respuestas correctas):** Tono introductorio y conceptual. Preguntas sobre la importancia de mirar los datos y ejemplos sencillos de lo que se busca (valores faltantes, errores).
            * *Tono:* "Est√°s dando tus primeros pasos en el apasionante mundo de la exploraci√≥n de datos."
        * **Nivel 2 (Analista de Datos ‚Äì 3-5 respuestas correctas):** Tono m√°s t√©cnico. Introduce estad√≠sticas descriptivas b√°sicas, tipos de datos y gr√°ficos univariados/bivariados comunes (histogramas, scatter plots). Preguntas sobre la interpretaci√≥n b√°sica de gr√°ficos.
            * *Tono:* "Tu habilidad para desentra√±ar las caracter√≠sticas de los datos est√° mejorando notablemente."
        * **Nivel 3 (Cient√≠fico de Datos ‚Äì 6-8 respuestas correctas):** Tono de **nivel universitario/bootcamp**. Profundiza en el manejo de outliers, estrategias de imputaci√≥n, m√©tricas de correlaci√≥n, y principios de visualizaci√≥n avanzada. Preguntas que requieren una comprensi√≥n de c√≥mo el EDA informa el modelado predictivo.
            * *Tono:* "Tu maestr√≠a en el an√°lisis exploratorio de datos es impecable, preparando el terreno para modelos robustos."
        * **Nivel Maestro (Especialista en Datos e Insights ‚Äì 9+ respuestas correctas):** Tono de **especialista en an√°lisis y descubrimiento de insights**. Preguntas sobre la elecci√≥n de t√©cnicas de visualizaci√≥n para datos complejos, EDA para series temporales o datos espaciales, la interpretaci√≥n de patrones sutiles, o la justificaci√≥n de decisiones de preprocesamiento basadas en el EDA. Se esperan respuestas que demuestren una comprensi√≥n cr√≠tica y la capacidad de comunicar insights complejos.
            * *Tono:* "Tu visi√≥n para transformar datos crudos en conocimiento accionable te posiciona como un verdadero experto en la ciencia de los datos."
        * Si el usuario responde 3 preguntas bien consecutivas, la dificultad sube GRADUALMENTE.
        * Si falla una pregunta, el contador se resetea a 0 y la dificultad vuelve al Nivel 1.
        * Si subes de nivel, ¬°aseg√∫rate de felicitar al usuario de forma entusiasta y explicando a qu√© tipo de nivel ha llegado!

    * **Ejemplos y Casos de Uso (Adaptados al Nivel):**
        * **Nivel 1:** Examinar una lista de edades de estudiantes para ver la edad m√°s com√∫n.
        * **Nivel 2:** Visualizar la relaci√≥n entre las horas de estudio y las notas de un examen, o identificar patrones de compra en un dataset de ventas.
        * **Nivel 3:** Realizar un EDA completo en un conjunto de datos financieros para identificar transacciones an√≥malas o preparar datos para un modelo de predicci√≥n de la demanda.
        * **Nivel Maestro:** Conducir un EDA para comprender las causas ra√≠z de la baja retenci√≥n de clientes, identificando segmentos clave y factores influyentes, o desarrollar visualizaciones interactivas para explorar datos gen√≥micos complejos.

    * **Un Turno a la Vez:** Haz solo una pregunta a la vez y espera la respuesta del usuario antes de hacer la siguiente.
    * **S√© motivador y profesional:** Usa un tono que incite al aprendizaje y al rigor t√©cnico, adaptado al nivel de cada etapa.
    * **Siempre responde en espa√±ol de Espa√±a.**
    * **La pregunta debe ser MUY VARIADA Y CREATIVA** sobre AN√ÅLISIS EXPLORATORIO DE DATOS (EDA), y aseg√∫rate de que no se parezca a las anteriores.
    """

    # Funci√≥n para parsear la respuesta de la IA (extraer pregunta, opciones y respuesta correcta)
    def parse_eda_question_response(raw_text):
        question = ""
        options = {}
        correct_answer_key = ""
        lines = raw_text.split('\n')
        for line in lines:
            line = line.strip()
            if line.lower().startswith("pregunta:"):
                question = line[len("pregunta:"):].strip()
            elif line.lower().startswith("a)"):
                options['A'] = line[len("a):"):].strip()
            elif line.lower().startswith("b)"):
                options['B'] = line[len("b):"):].strip()
            elif line.lower().startswith("c)"):
                options['C'] = line[len("c):"):].strip()
            elif line.lower().startswith("respuestacorrecta:"):
                correct_answer_key = line[len("respuestacorrecta:"):].strip().upper()
        if not (question and len(options) == 3 and correct_answer_key in options):
            st.warning(f"DEBUG: Formato de pregunta inesperado de la API. Texto recibido:\n{raw_text}")
            return None, {}, ""
        return question, options, correct_answer_key

    # Funci√≥n para parsear la respuesta de feedback de la IA
    def parse_eda_feedback_response(raw_text):
        lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
        if len(lines) >= 3:
            return lines[0], lines[1], lines[2]
        st.warning(f"DEBUG: Formato de feedback inesperado de la API. Texto recibido:\n{raw_text}")
        return "Respuesta procesada.", "Aqu√≠ tienes la explicaci√≥n.", "¬øQuieres otra pregunta?"
    
    # --- Funciones para subir de nivel directamente ---
    def set_eda_level(target_streak, level_name):
        st.session_state.eda_correct_streak = target_streak
        st.session_state.eda_game_active = True
        st.session_state.eda_game_messages = []
        st.session_state.eda_current_question = None
        st.session_state.eda_current_options = {}
        st.session_state.eda_correct_answer = None
        st.session_state.eda_game_needs_new_question = True
        st.session_state.eda_awaiting_next_game_decision = False
        st.session_state.eda_game_messages.append({"role": "assistant", "content": f"¬°Hola! ¬°Has saltado directamente al **Nivel {level_name}**! Prep√°rate para preguntas m√°s desafiantes. ¬°Aqu√≠ va tu primera!"})
        st.rerun()

    # Botones para iniciar o reiniciar el juego y subir de nivel
    col_game_buttons_eda, col_level_up_buttons_eda = st.columns([1, 2])

    with col_game_buttons_eda:
        if st.button("¬°Vamos a jugar con Eddy el Explorador!", key="start_eddy_game_button"):
            st.session_state.eda_game_active = True
            st.session_state.eda_game_messages = []
            st.session_state.eda_current_question = None
            st.session_state.eda_current_options = {}
            st.session_state.eda_correct_answer = None
            st.session_state.eda_game_needs_new_question = True
            st.session_state.eda_awaiting_next_game_decision = False
            st.session_state.eda_correct_streak = 0
            st.rerun()
    
    with col_level_up_buttons_eda:
        st.markdown("<p style='font-size: 1.1em; font-weight: bold;'>¬øYa eres un experto explorador? ¬°Salta de nivel! üëá</p>", unsafe_allow_html=True)
        col_lvl1_eda, col_lvl2_eda, col_lvl3_eda = st.columns(3)
        with col_lvl1_eda:
            if st.button("Subir a Nivel Medio (EDA)", key="level_up_medium_eda"):
                set_eda_level(3, "Medio")
        with col_lvl2_eda:
            if st.button("Subir a Nivel Avanzado (EDA)", key="level_up_advanced_eda"):
                set_eda_level(6, "Avanzado")
        with col_lvl3_eda:
            if st.button("üëë ¬°Maestro Explorador! (EDA)", key="level_up_champion_eda"):
                set_eda_level(9, "Campe√≥n")


    # Mostrar mensajes del juego del chatbot
    for message in st.session_state.eda_game_messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])


    # L√≥gica del juego del chatbot si est√° activo
    if st.session_state.eda_game_active:
        if st.session_state.eda_current_question is None and st.session_state.eda_game_needs_new_question and not st.session_state.eda_awaiting_next_game_decision:
            with st.spinner("Eddy est√° preparando una pregunta..."):
                try:
                    eda_game_messages_for_api = [{"role": "system", "content": eda_game_system_prompt}]
                    for msg in st.session_state.eda_game_messages[-6:]: 
                        if msg["role"] == "assistant" and msg["content"].startswith("**"):
                            eda_game_messages_for_api.append({"role": "assistant", "content": f"PREGUNTA ANTERIOR: {msg['content'].splitlines()[0]}"})
                        elif msg["role"] == "user" and "MI RESPUESTA:" not in msg["content"]:
                            eda_game_messages_for_api.append({"role": "user", "content": f"MI RESPUESTA: {msg['content']}"})

                    eda_game_messages_for_api.append({"role": "user", "content": "Genera una **nueva pregunta** sobre QU√â ES EDA siguiendo el formato exacto."})

                    eda_response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=eda_game_messages_for_api,
                        temperature=0.8,
                        max_tokens=300
                    )
                    raw_eda_question_text = eda_response.choices[0].message.content
                    question, options, correct_answer_key = parse_eda_question_response(raw_eda_question_text)

                    if question:
                        st.session_state.eda_current_question = question
                        st.session_state.eda_current_options = options
                        st.session_state.eda_correct_answer = correct_answer_key
                        st.session_state.eda_game_needs_new_question = False
                        
                        question_content = f"**Nivel {int(st.session_state.eda_correct_streak / 3) + 1} - Aciertos consecutivos: {st.session_state.eda_correct_streak}**\n\n**Pregunta de Eddy:** {question}\n\n"
                        for k, v in options.items():
                            question_content += f"**{k})** {v}\n"
                        
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": question_content})
                        st.rerun()
                    else:
                        st.error("Eddy no pudo generar una pregunta v√°lida. Intenta de nuevo.")
                        st.session_state.eda_game_active = False # Detener el juego para evitar bucle de errores
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": "Eddy no pudo generar una pregunta v√°lida. Parece que hay un problema. Por favor, reinicia el juego."})

                except Exception as e:
                    st.error(f"Error al comunicarse con la API de OpenAI para la pregunta: {e}")
                    st.session_state.eda_game_active = False
                    st.session_state.eda_game_messages.append({"role": "assistant", "content": "Lo siento, tengo un problema para conectar con mi cerebro (la API). ¬°Por favor, reinicia el juego!"})
                    st.rerun()

        if st.session_state.eda_current_question and not st.session_state.eda_awaiting_next_game_decision:
            if st.session_state.get('last_played_question') != st.session_state.eda_current_question:
                try:
                    tts_text = f"Nivel {int(st.session_state.eda_correct_streak / 3) + 1}. Aciertos consecutivos: {st.session_state.eda_correct_streak}. Pregunta de Eddy: {st.session_state.eda_current_question}. Opci√≥n A: {st.session_state.eda_current_options.get('A', '')}. Opci√≥n B: {st.session_state.eda_current_options.get('B', '')}. Opci√≥n C: {st.session_state.eda_current_options.get('C', '')}."
                    tts = gTTS(text=tts_text, lang='es', slow=False)
                    fp = io.BytesIO()
                    tts.write_to_fp(fp)
                    fp.seek(0)
                    st.audio(fp, format='audio/mp3', start_time=0)
                    st.session_state.last_played_question = st.session_state.eda_current_question
                except Exception as e:
                    st.error(f"Error al generar o reproducir el audio de la pregunta: {e}")

            with st.form(key="eda_game_form"):
                radio_placeholder = st.empty()
                with radio_placeholder.container():
                    st.markdown("Elige tu respuesta:")
                    user_answer = st.radio(
                        "Elige tu respuesta:",
                        options=list(st.session_state.eda_current_options.keys()),
                        format_func=lambda x: f"{x}) {st.session_state.eda_current_options[x]}",
                        key="eda_answer_radio",
                        label_visibility="collapsed"
                    )
                submit_button = st.form_submit_button("¬°Enviar Respuesta!")

            if submit_button:
                st.session_state.eda_game_messages.append({"role": "user", "content": f"MI RESPUESTA: {user_answer}) {st.session_state.eda_current_options[user_answer]}"})
                prev_streak = st.session_state.eda_correct_streak
                is_correct = (user_answer == st.session_state.eda_correct_answer)

                if is_correct:
                    st.session_state.eda_correct_streak += 1
                else:
                    st.session_state.eda_correct_streak = 0

                radio_placeholder.empty()

                if st.session_state.eda_correct_streak > 0 and \
                   st.session_state.eda_correct_streak % 3 == 0 and \
                   st.session_state.eda_correct_streak > prev_streak:
                    
                    if st.session_state.eda_correct_streak < 9:
                        current_level_text = ""
                        if st.session_state.eda_correct_streak == 3:
                            current_level_text = "Medio (como un adolescente que ya entiende la base de los datos)"
                        elif st.session_state.eda_correct_streak == 6:
                            current_level_text = "Avanzado (como un buen explorador de datos)"
                        
                        level_up_message = f"¬°Incre√≠ble! ¬°Has respondido {st.session_state.eda_correct_streak} preguntas seguidas correctamente! ¬°Felicidades! Has subido al **Nivel {current_level_text}** de EDA. ¬°Las preguntas ser√°n un poco m√°s desafiantes ahora! ¬°Eres un/a verdadero/a detective de datos! üöÄ"
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": level_up_message})
                        st.balloons()
                        # Generar audio
                        try:
                            tts_level_up = gTTS(text=level_up_message, lang='es', slow=False)
                            audio_fp_level_up = io.BytesIO()
                            tts_level_up.write_to_fp(audio_fp_level_up)
                            audio_fp_level_up.seek(0)
                            st.audio(audio_fp_level_up, format="audio/mp3", start_time=0)
                            time.sleep(2)
                        except Exception as e:
                            st.warning(f"No se pudo reproducir el audio de subida de nivel: {e}")
                    elif st.session_state.eda_correct_streak >= 9:
                        medals_earned = (st.session_state.eda_correct_streak - 6) // 3 
                        medal_message = f"üèÖ ¬°FELICITACIONES, MAESTRO/A EXPLORADOR/A! ¬°Has ganado tu {medals_earned}¬™ Medalla de Exploraci√≥n de Datos! ¬°Tu habilidad es asombrosa y digna de un verdadero EXPERTO en EDA! ¬°Sigue as√≠! üåü"
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": medal_message})
                        st.balloons()
                        st.snow()
                        try:
                            tts_medal = gTTS(text=medal_message, lang='es', slow=False)
                            audio_fp_medal = io.BytesIO()
                            tts_medal.write_to_fp(audio_fp_medal)
                            audio_fp_medal.seek(0)
                            st.audio(audio_fp_medal, format="audio/mp3", start_time=0)
                            time.sleep(3)
                        except Exception as e:
                            st.warning(f"No se pudo reproducir el audio de medalla: {e}")
            
                        if prev_streak < 9:
                            level_up_message_champion = f"¬°Has desbloqueado el **Nivel Campe√≥n (Maestro Explorador de Datos)**! ¬°Las preguntas ahora son solo para los verdaderos genios y futuros cient√≠ficos de datos! ¬°Adelante!"
                            st.session_state.eda_game_messages.append({"role": "assistant", "content": level_up_message_champion})
                            try:
                                tts_level_up_champion = gTTS(text=level_up_message_champion, lang='es', slow=False)
                                audio_fp_level_up_champion = io.BytesIO()
                                tts_level_up_champion.write_to_fp(audio_fp_level_up_champion)
                                audio_fp_level_up_champion.seek(0)
                                st.audio(audio_fp_level_up_champion, format="audio/mp3", start_time=0)
                                time.sleep(2)
                            except Exception as e:
                                st.warning(f"No se pudo reproducir el audio de campe√≥n: {e}")

                with st.spinner("Eddy est√° pensando su respuesta..."):
                    try:
                        feedback_prompt = f"""
                        El usuario respondi√≥ '{user_answer}'. La pregunta era: '{st.session_state.eda_current_question}'.
                        La respuesta correcta era '{st.session_state.eda_correct_answer}'.
                        Da feedback como Eddy el Explorador.
                        Si es CORRECTO, el mensaje es "¬°Exploraci√≥n exitosa!" o similar.
                        Si es INCORRECTO, el mensaje es "¬°Revisa tu br√∫jula!" o similar.
                        Luego, una explicaci√≥n sencilla para el usuario.
                        Finalmente, pregunta: "¬øQuieres seguir explorando?".
                        **Sigue el formato estricto de feedback que tienes en tus instrucciones de sistema.**
                        """
                        feedback_response = client.chat.completions.create(
                            model="gpt-4o-mini",
                            messages=[
                                {"role": "system", "content": eda_game_system_prompt},
                                {"role": "user", "content": feedback_prompt}
                            ],
                            temperature=0.7,
                            max_tokens=300
                        )
                        raw_eda_feedback_text = feedback_response.choices[0].message.content
                        feedback_message, explanation_message, continue_question = parse_eda_feedback_response(raw_eda_feedback_text)
                        
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": feedback_message})
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": explanation_message})
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": continue_question})

                        try:
                            tts = gTTS(text=f"{feedback_message}. {explanation_message}. {continue_question}", lang='es', slow=False)
                            audio_fp = io.BytesIO()
                            tts.write_to_fp(audio_fp)
                            audio_fp.seek(0)
                            st.audio(audio_fp, format="audio/mp3", start_time=0)
                        except Exception as e:
                            st.warning(f"No se pudo reproducir el audio de feedback: {e}")


                        st.session_state.eda_current_question = None # Limpiar pregunta actual
                        st.session_state.eda_current_options = {}
                        st.session_state.eda_correct_answer = None
                        st.session_state.eda_game_needs_new_question = False
                        st.session_state.eda_awaiting_next_game_decision = True
                        st.rerun()

                    except Exception as e:
                        st.error(f"Error al comunicarse con la API de OpenAI para el feedback: {e}")
                        st.session_state.eda_game_active = False
                        st.session_state.eda_game_messages.append({"role": "assistant", "content": "Lo siento, no puedo darte feedback ahora mismo. ¬°Por favor, reinicia el juego!"})
                        st.rerun()

        # Botones para continuar o terminar el juego
        if st.session_state.eda_awaiting_next_game_decision:
            st.markdown("---")
            st.markdown("¬øQu√© quieres hacer ahora?")
            col_continue, col_end = st.columns(2)
            with col_continue:
                if st.button("üëç S√≠, quiero seguir explorando!", key="continue_eda_game"):
                    st.session_state.eda_awaiting_next_game_decision = False
                    st.session_state.eda_game_needs_new_question = True
                    st.session_state.eda_game_messages.append({"role": "assistant", "content": "¬°Genial! ¬°Aqu√≠ va tu siguiente desaf√≠o!"})
                    st.rerun()
            with col_end:
                if st.button("üëé No, gracias! Quiero descansar.", key="end_eda_game"):
                    st.session_state.eda_game_active = False
                    st.session_state.eda_awaiting_next_game_decision = False
                    st.session_state.eda_game_messages.append({"role": "assistant", "content": "¬°Gracias por jugar! ¬°Vuelve pronto para seguir explorando el mundo de los datos!"})
                    st.rerun()

else:
    st.info("El chatbot Eddy no est√° disponible porque la clave de la API de OpenAI no est√° configurada.")

st.write("---")