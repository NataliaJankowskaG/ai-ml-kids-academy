import streamlit as st
import pandas as pd
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from io import StringIO
import pydotplus
import json
from streamlit_lottie import st_lottie
import openai
from gtts import gTTS
import io
import time
import os

# --- Configuraci√≥n de la p√°gina ---
st.set_page_config(
    page_title="√Årboles de Decisi√≥n - Academia de Agentes IA",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Inicializaci√≥n del cliente OpenAI ---
try:
    client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
except AttributeError:
    client = None
    st.error("¬°Advertencia! No se encontr√≥ la clave de API de OpenAI. Algunas funcionalidades (como la generaci√≥n de datos curiosos) no estar√°n disponibles. Por favor, configura 'openai_api_key' en tu archivo .streamlit/secrets.toml")

# --- Obtener la ruta base del proyecto ---
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# --- Funci√≥n para cargar animaciones Lottie locales ---
def load_lottiefile(filepath: str):
    """Carga un archivo JSON de animaci√≥n Lottie desde una ruta local."""
    absolute_filepath = os.path.join(PROJECT_ROOT, filepath)

    try:
        with open(absolute_filepath, "r", encoding="utf8") as f:
            return json.load(f)
    except FileNotFoundError:
        st.warning(f"Advertencia: No se encontr√≥ el archivo Lottie en la ruta: {absolute_filepath}")
        return None
    except json.JSONDecodeError:
        st.error(f"Error: El archivo Lottie '{absolute_filepath}' no es un JSON v√°lido.")
        return None
    except Exception as e:
        st.error(f"Error inesperado al cargar el archivo Lottie '{absolute_filepath}': {e}. Aseg√∫rate de que el archivo no est√© corrupto y sea un JSON v√°lido.")
        return None

# --- Rutas a Lottie y Im√°genes ---
LOTTIE_ARBOL_RELATIVE_PATH = os.path.join("assets", "lottie_animations", "arbol.json")
GAME_IMAGES_RELATIVE_PATH = os.path.join("assets", "imagenes")

# --- Definici√≥n del √Årbol de Decisi√≥n del Juego ---
decision_tree_data = {
    "q1": {
        "text": "¬øTu animal vive principalmente en el agua (oc√©ano, r√≠o, lago)?",
        "options": {
            "S√≠": {"next_question": "q2_agua"},
            "No": {"next_question": "q2_tierra_aire"}
        }
    },
    "q2_agua": {
        "text": "¬øTu animal tiene aletas o es un animal nadador sin patas ni alas?",
        "options": {
            "S√≠": {"next_question": "q3_marino"},
            "No": {"result": "Tortuga", "image": "tortuga.png"}
        }
    },
    "q3_marino": {
        "text": "¬øTu animal tiene muchos brazos (tent√°culos)?",
        "options": {
            "S√≠": {"result": "Pulpo", "image": "pulpo.png"},
            "No": {"next_question": "q4_pez_grande"}
        }
    },
    "q4_pez_grande": {
        "text": "¬øTu animal es un pez muy grande y temible con dientes afilados?",
        "options": {
            "S√≠": {"result": "Tibur√≥n", "image": "tiburon.png"},
            "No": {"result": "Pez", "image": "pez.png"}
        }
    },
    "q2_tierra_aire": {
        "text": "¬øTu animal puede volar o tiene alas?",
        "options": {
            "S√≠": {"next_question": "q3_vuela"},
            "No": {"next_question": "q3_no_vuela"}
        }
    },
    "q3_vuela": {
        "text": "¬øTu animal vuela principalmente de noche y usa sus orejas para ver?",
        "options": {
            "S√≠": {"result": "Murci√©lago", "image": "murcielago.png"},
            "No": {"next_question": "q4_vuela_plumas"}
        }
    },
    "q4_vuela_plumas": {
        "text": "¬øTu animal tiene plumas?",
        "options": {
            "S√≠": {"result": "P√°jaro", "image": "pajaro.png"},
            "No": {"result": "Mariposa", "image": "mariposa.png"}
        }
    },
    "q3_no_vuela": {
        "text": "¬øTu animal tiene la piel cubierta de pelo o pelaje?",
        "options": {
            "S√≠": {"next_question": "q4_pelaje"},
            "No": {"next_question": "q4_sin_pelaje"}
        }
    },
    "q4_pelaje": {
        "text": "¬øTu animal tiene rayas blancas y negras?",
        "options": {
            "S√≠": {"result": "Cebra", "image": "cebra.png"},
            "No": {"next_question": "q5_grande_felino"}
        }
    },
    "q5_grande_felino": {
        "text": "¬øTu animal es un felino grande y ruge?",
        "options": {
            "S√≠": {"result": "Le√≥n", "image": "leon.png"},
            "No": {"next_question": "q6_trompa"}
        }
    },
    "q6_trompa": {
        "text": "¬øTu animal tiene una trompa muy larga?",
        "options": {
            "S√≠": {"result": "Elefante", "image": "elefante.png"},
            "No": {"result": "Oso", "image": "oso.png"}
        }
    },
    "q4_sin_pelaje": {
        "text": "¬øTu animal tiene escamas o piel muy dura y arrastra el cuerpo?",
        "options": {
            "S√≠": {"next_question": "q5_reptil_forma"},
            "No": {"result": "Rana", "image": "rana.png"}
        }
    },
    "q5_reptil_forma": {
        "text": "¬øTu animal tiene una forma alargada y no tiene patas?",
        "options": {
            "S√≠": {"result": "Serpiente", "image": "serpiente.png"},
            "No": {"result": "Cocodrilo", "image": "cocodrilo.png"}
        }
    }
}


# --- Funciones del Juego (sin cambios) ---
def start_game():
    st.session_state.game_state = "playing"
    st.session_state.current_question_id = "q1" # Empezar por la primera pregunta
    st.session_state.animal_path = [] # Para guardar las respuestas dadas
    st.session_state.adivinado_animal_info = None # Para guardar el resultado final

def reset_game():
    # Eliminar todas las claves relacionadas con el juego de session_state
    keys_to_delete = ["game_state", "current_question_id", "animal_path", "adivinado_animal_info"]
    for key in keys_to_delete:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun() # Reiniciar la p√°gina para empezar de cero

# --- Sidebar (Men√∫ de navegaci√≥n) ---
st.sidebar.title("Home")
st.sidebar.markdown("""
- Que es Inteligencia Artificial
- Que son Modelos Predictivos
- Que es EDA
- Que es Regresi√≥n Lineal
- Que es Clasificaci√≥n
- Que es Clustering (k-means)
- Que son √Årboles de Decisi√≥n
- Que es K-Nearest Neighbors (KNN)
- Que son M√°quinas de Vectores de So...
- Que son M√©todos Ensemble (Random...
- Que es Deep Learning
- Que son Redes Neuronales Artificiales
- Que son Redes Neuronales Convoluci...
- Que son Redes Neuronales Recurrent...
- Que son Mapas Autoorganizados (SOM)
- Que son Redes Generativas Antag√≥nic...
- Que es IA Generativa
""")

# --- Contenido Principal de la P√°gina ---
st.title("üå≥ ¬øQu√© son los √Årboles de Decisi√≥n?")

st.markdown("""
¬°Hola, futuro experto en Inteligencia Artificial! Hoy vamos a aprender sobre un tipo de "√°rbol" muy especial: ¬°los √Årboles de Decisi√≥n!
""")

# --- la animaci√≥n Lottie principal ---
# Esta secci√≥n carga y muestra la animaci√≥n Lottie del √°rbol.json
# Usamos LOTTIE_ARBOL_RELATIVE_PATH que ser√° 'assets/lottie_animations/arbol.json'
# La funci√≥n load_lottiefile se encargar√° de construir la ruta absoluta internamente.
lottie_arbol = load_lottiefile(LOTTIE_ARBOL_RELATIVE_PATH) # <--- CAMBIO IMPORTANTE AQU√ç

if lottie_arbol:
    st_lottie(
        lottie_arbol,
        speed=1,
        reverse=False,
        loop=True,
        quality="high",
        height=300, # Ajustar altura para dejar espacio
        width=None,
        key="arbol_decision_lottie",
    )
else:
    st.warning(f"No se pudo cargar la animaci√≥n Lottie principal. Aseg√∫rate de que la ruta {LOTTIE_ARBOL_RELATIVE_PATH} es correcta y que el archivo JSON es v√°lido.")


st.markdown("""
Imagina que un √Årbol de Decisi√≥n es como un juego de "Adivina Qui√©n". Cada vez que llegas a una "rama" del √°rbol, haces una pregunta. Dependiendo de la respuesta, sigues un camino diferente hasta llegar a una "hoja" que te da la respuesta final.

**¬øPara qu√© sirven?** Los √Årboles de Decisi√≥n nos ayudan a tomar decisiones o a clasificar cosas bas√°ndose en diferentes caracter√≠sticas. Por ejemplo, pueden ayudarnos a decidir si debemos llevar un paraguas (¬øest√° lloviendo?), si un animal es un perro o un gato (¬øtiene bigotes?), o incluso a predecir si un cliente comprar√° un producto.
""")

st.subheader("¬°Vamos a jugar a un juego de √Årbol de Decisi√≥n para ni√±os!")

st.markdown("""
Imagina que eres un detective de animales y tienes que adivinar qu√© animal es. ¬°Te haremos preguntas y t√∫ seguir√°s el camino correcto!
""")

# --- Juego Interactivo de Adivina el Animal ---
st.write("---")
st.subheader("El Detective de Animales: ¬°Adivina el Animal!")

# Inicializar el estado del juego si no existe
if "game_state" not in st.session_state:
    st.session_state.game_state = "start"

if st.session_state.game_state == "start":
    st.info("¬°Presiona el bot√≥n para empezar a adivinar tu animal secreto!")
    if st.button("üöÄ ¬°Empezar a Jugar!", key="start_game_button"):
        start_game()
        st.rerun() # Recargar para ir al estado de juego

elif st.session_state.game_state == "playing":
    current_question = decision_tree_data.get(st.session_state.current_question_id)

    if current_question:
        st.markdown(f"**Pregunta: {current_question['text']}**")
        
        options = list(current_question["options"].keys())
        
        # Usamos st.radio para que el ni√±o elija una opci√≥n
        selected_option = st.radio("Elige tu respuesta:", options, key=st.session_state.current_question_id)
        
        if st.button("‚û°Ô∏è ¬°Siguiente!", key=f"next_q_{st.session_state.current_question_id}"):
            st.session_state.animal_path.append(selected_option) # Guardar la respuesta
            
            next_step = current_question["options"][selected_option]
            
            if "next_question" in next_step:
                st.session_state.current_question_id = next_step["next_question"]
            elif "result" in next_step:
                st.session_state.game_state = "result"
                st.session_state.adivinado_animal_info = next_step
            st.rerun() # Recargar para mostrar la siguiente pregunta o el resultado
            
    else:
        st.error("¬°Ups! Parece que algo sali√≥ mal con las preguntas. ¬°Reinicia el juego!")
        if st.button("Reiniciar Juego", key="error_reset_game"):
            reset_game()


elif st.session_state.game_state == "result":
    animal_info = st.session_state.adivinado_animal_info
    if animal_info:
        st.success(f"ü•≥ ¬°Has adivinado! ¬°Eres un **{animal_info['result']}**!")
        st.markdown("¬øVes? Cada pregunta te lleva a un camino diferente, ¬°igual que en un √°rbol de decisi√≥n!")

        # Mostrar imagen del animal
        # Construimos la ruta absoluta para la imagen
        image_absolute_path = os.path.join(PROJECT_ROOT, GAME_IMAGES_RELATIVE_PATH, animal_info['image']) # <--- CAMBIO IMPORTANTE AQU√ç
        
        if os.path.exists(image_absolute_path):
            st.image(image_absolute_path, caption=animal_info['result'], use_container_width=False, width=300) # Ajusta el ancho
        else:
            st.warning(f"Imagen '{animal_info['image']}' no encontrada en la ruta: '{image_absolute_path}'.") # Mensaje m√°s √∫til

        # Opcional: Generar dato curioso con OpenAI y reproducirlo
        if client and openai.api_key: # Asegurarse de que el cliente y la clave est√©n disponibles
            st.markdown("---")
            st.subheader("¬°Dato curioso de tu animal!")
            try:
                with st.spinner("Generando dato curioso..."):
                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo", # Puedes probar con "gpt-4" si tienes acceso y quieres m√°s calidad
                        messages=[
                            {"role": "system", "content": "Act√∫a como un experto en animales muy amigable para ni√±os."},
                            {"role": "user", "content": f"Dame una curiosidad muy corta y divertida sobre un {animal_info['result']} para ni√±os (m√°ximo 20 palabras)."}
                        ],
                        max_tokens=50,
                        temperature=0.7
                    )
                    curiosidad = response.choices[0].message.content
                    st.info(f"¬°Sab√≠as que... {curiosidad}!")

                # Reproducir audio del dato curioso
                with st.spinner("Generando audio..."):
                    tts = gTTS(curiosidad, lang='es', slow=False)
                    audio_fp = io.BytesIO()
                    tts.write_to_fp(audio_fp)
                    audio_fp.seek(0)
                    st.audio(audio_fp, format='audio/mp3', start_time=0)
            except Exception as e:
                st.warning(f"No pude generar un dato curioso o audio en este momento: {e}")


        st.markdown("---")
        st.write("¬øQuieres volver a jugar y adivinar otro animal?")
        if st.button("üîÑ ¬°Jugar de Nuevo!", key="reset_game_button_result"):
            reset_game()
    else:
        st.error("No se pudo determinar el resultado. ¬°Reinicia el juego!")
        if st.button("Reiniciar Juego", key="no_result_reset_game"):
            reset_game()

st.write("---")




st.subheader("Un ejemplo real de c√≥mo funciona un √Årbol de Decisi√≥n (¬°para futuros cient√≠ficos de datos!)")
st.markdown("""
Ahora que hemos jugado, te mostraremos c√≥mo los cient√≠ficos usan los √°rboles de decisi√≥n para hacer predicciones.
Vamos a usar un ejemplo donde queremos saber **"¬øQu√© tipo de mascota es?"** bas√°ndonos en sus caracter√≠sticas.
""")

st.markdown("### Nuestros datos de ejemplo:")

pet_data_current_behavior = {
    'Tiene_Pelo': [
        'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠',  # 10 con pelo
        'No', 'No', 'No', 'No', 'No',                             # 5 sin pelo (P√°jaros)
        'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', 'S√≠', # Otros 10 con pelo
        'No', 'No', 'No', 'No', 'No'                              # Otros 5 sin pelo (P√°jaros)
    ],
    'Tama√±o_Peque√±o': [
        'No', 'S√≠', 'No', 'S√≠', 'No', 'S√≠', 'No', 'S√≠', 'No', 'S√≠', # Variedad para con pelo
        'S√≠', 'No', 'S√≠', 'No', 'S√≠',                             # Variedad para sin pelo
        'No', 'S√≠', 'No', 'S√≠', 'No', 'S√≠', 'No', 'S√≠', 'No', 'S√≠',
        'S√≠', 'No', 'S√≠', 'No', 'S√≠'
    ],
    'Hace_Sonido': [
        'Guau', 'Miau', 'Guau', 'Miau', 'Guau', 'Miau', 'Guau', 'Miau', 'Guau', 'Miau', # Mezcla de sonidos para con pelo
        'P√≠o', 'P√≠o', 'P√≠o', 'P√≠o', 'P√≠o',                                            # Solo "P√≠o" para sin pelo (garantiza pureza de p√°jaro)
        'Guau', 'Miau', 'Guau', 'Miau', 'Guau', 'Miau', 'Guau', 'Miau', 'Guau', 'Miau',
        'P√≠o', 'P√≠o', 'P√≠o', 'P√≠o', 'P√≠o'
    ],
    'Mascota': [
        'Perro', 'Gato', 'Perro', 'Gato', 'Perro', 'Gato', 'Perro', 'Gato', 'Perro', 'Gato', # Perros y Gatos (con pelo)
        'P√°jaro', 'P√°jaro', 'P√°jaro', 'P√°jaro', 'P√°jaro',                                # Solo P√°jaros (sin pelo, grupo puro)
        'Perro', 'Gato', 'Perro', 'Gato', 'Perro', 'Gato', 'Perro', 'Gato', 'Perro', 'Gato',
        'P√°jaro', 'P√°jaro', 'P√°jaro', 'P√°jaro', 'P√°jaro'
    ]
}
df_pet = pd.DataFrame(pet_data_current_behavior)
st.dataframe(df_pet)

st.markdown("""
Para que el ordenador entienda estos datos y pueda "dibujar" el √°rbol, necesita convertirlos a n√∫meros. ¬°Es como traducir un idioma! Cada caracter√≠stica (como 'Tiene Pelo' o 'Guau') se convierte en un n√∫mero.
""")

df_pet_encoded = df_pet.copy()

# Mapeos expl√≠citos para mayor claridad en la visualizaci√≥n y consistencia con class_names
pelo_mapping = {'No': 0, 'S√≠': 1}
tamano_mapping = {'No': 0, 'S√≠': 1}
sonido_mapping = {'Miau': 0, 'Guau': 1, 'P√≠o': 2}
mascota_output_mapping = {'Gato': 0, 'Perro': 1, 'P√°jaro': 2}

df_pet_encoded['Tiene_Pelo'] = df_pet_encoded['Tiene_Pelo'].map(pelo_mapping)
df_pet_encoded['Tama√±o_Peque√±o'] = df_pet_encoded['Tama√±o_Peque√±o'].map(tamano_mapping)
df_pet_encoded['Hace_Sonido'] = df_pet_encoded['Hace_Sonido'].map(sonido_mapping)
df_pet_encoded['Mascota'] = df_pet_encoded['Mascota'].map(mascota_output_mapping)

st.dataframe(df_pet_encoded)

# Separar caracter√≠sticas (X) y objetivo (y)
X_pet = df_pet_encoded[['Tiene_Pelo', 'Tama√±o_Peque√±o', 'Hace_Sonido']]
y_pet = df_pet_encoded['Mascota']

# Entrenar el √Årbol de Decisi√≥n
model_pet = DecisionTreeClassifier(criterion='entropy', random_state=42)
model_pet.fit(X_pet, y_pet)

try:
    # Visualizar el √°rbol
    dot_data_pet = StringIO()
    export_graphviz(model_pet, out_file=dot_data_pet,
                    feature_names=X_pet.columns,
                    class_names=['Gato', 'Perro', 'P√°jaro'],
                    filled=True, rounded=True,
                    special_characters=True)

    graph_pet = pydotplus.graph_from_dot_data(dot_data_pet.getvalue())
    tree_image_path_pet = 'decision_tree_pet.png'
    graph_pet.write_png(tree_image_path_pet)

    st.image(tree_image_path_pet, caption='Nuestro √Årbol de Decisi√≥n para "Adivinar la Mascota"', use_container_width=True)

    # --- EXPLICACI√ìN DEL GR√ÅFICO ---
    st.markdown("---")
    st.subheader("¬°Entendiendo el √Årbol de Decisi√≥n para adivinar mascotas!")
    st.markdown("""
    Mira el gr√°fico del √°rbol que aparece arriba. ¬°Es un mapa para adivinar qu√© mascota es!

    **Cada caja (o "nodo") es una pregunta.** Las preguntas te gu√≠an por el √°rbol hasta que llegas a una respuesta final.

    **Vamos a ver c√≥mo funciona, paso a paso, como si estuvi√©ramos buscando una mascota:**

    1.  **Empezamos arriba, en la primera caja (el "nodo ra√≠z").** Aqu√≠ se hace la pregunta m√°s importante para diferenciar a los animales. En nuestro √°rbol, la primera pregunta es: **`Hace_Sonido <= 0.5`**
        * ¬øRecuerdas que tradujimos 'Miau' a 0, 'Guau' a 1 y 'P√≠o' a 2 para 'Hace_Sonido'? Esta pregunta se traduce a: **"¬øEl animal hace 'Miau'?"** (es decir, el valor para 'Hace_Sonido' es 0, que es menor o igual a 0.5).
        * Si la respuesta es **S√ç** (el animal hace 'Miau'), seguimos la flecha `True` (hacia la izquierda).
            * Este camino lleva a una **hoja final** donde la `class` es **Gato**. ¬°As√≠ que si hace 'Miau', es un Gato!
        * Si la respuesta es **NO** (el animal hace 'Guau' o 'P√≠o'), seguimos la flecha `False` (hacia la derecha).

    3.  **Si fuimos por la derecha (el animal NO hace 'Miau', es decir, hace 'Guau' o 'P√≠o'):** Llegamos a otra nueva caja. Esta caja nos pregunta sobre el **"Tiene_Pelo"**.
        * La pregunta es `Tiene_Pelo <= 0.5`. ¬øRecuerdas que 'No' es 0 y 'S√≠' es 1 para 'Tiene_Pelo'? Esta pregunta se traduce a: **"¬øEl animal NO tiene pelo?"** (es decir, el valor para 'Tiene_Pelo' es 0, que es menor o igual a 0.5).
        * Si la respuesta es **S√ç** (el animal NO tiene pelo), seguimos la flecha `True` (hacia la izquierda).
            * Este camino lleva a una **hoja final** donde la `class` es **P√°jaro**. ¬°Si no hace 'Miau' y no tiene pelo, es un P√°jaro!
        * Si la respuesta es **NO** (el animal S√ç tiene pelo), seguimos la flecha `False` (hacia la derecha).
            * Este camino lleva a una **hoja final** donde la `class` es **Perro**. ¬°Si no hace 'Miau' pero s√≠ tiene pelo, es un Perro!

    **Las "hojas" (las cajas al final de las ramas que no se dividen m√°s) son las respuestas finales.** La `class` que ves en cada hoja te dice qu√© tipo de mascota predice el √°rbol.

    **En resumen:** Este √°rbol usa preguntas sobre el sonido y el pelo para ayudarnos a adivinar qu√© tipo de mascota es, ¬°empezando por el sonido!
    """)

except Exception as e:
    st.warning(f"No se pudo generar la imagen del √Årbol de Decisi√≥n. Aseg√∫rate de tener Graphviz instalado y configurado correctamente. Error: {e}")
    st.markdown("Puedes aprender m√°s sobre la visualizaci√≥n de √°rboles de decisi√≥n en la documentaci√≥n de scikit-learn o pydotplus.")


st.markdown("""
Esperamos que este ejemplo te haya ayudado a entender un poco mejor c√≥mo funcionan los √Årboles de Decisi√≥n. ¬°Son como un mapa que te gu√≠a hacia la mejor decisi√≥n!
""")


# --- Secci√≥n de Chatbot de Juego con Arbol√≠n ---
st.header("¬°Juega y Aprende con Arbol√≠n sobre los √Årboles de Decisi√≥n!")
st.markdown("¬°Hola! Soy Arbol√≠n, el guardi√°n de las decisiones. ¬øListo para recorrer los caminos de las preguntas y encontrar la respuesta correcta?")

# Inicializa el estado del juego y los mensajes del chat
if "tree_game_active" not in st.session_state:
    st.session_state.tree_game_active = False
if "tree_game_messages" not in st.session_state:
    st.session_state.tree_game_messages = []
if "tree_current_question" not in st.session_state:
    st.session_state.tree_current_question = None
if "tree_current_options" not in st.session_state:
    st.session_state.tree_current_options = {}
if "tree_correct_answer" not in st.session_state:
    st.session_state.tree_correct_answer = None
if "tree_awaiting_next_game_decision" not in st.session_state:
    st.session_state.tree_awaiting_next_game_decision = False
if "tree_game_needs_new_question" not in st.session_state:
    st.session_state.tree_game_needs_new_question = False
if "tree_correct_streak" not in st.session_state:
    st.session_state.tree_correct_streak = 0
if "last_played_question_arbolin_tree" not in st.session_state:
    st.session_state.last_played_question_arbolin_tree = None

arbolin_tree_game_system_prompt = f"""
Eres un **experto en Machine Learning y Ciencia de Datos**, especializado en el campo de los **√Årboles de Decisi√≥n**. Tu misi√≥n es actuar como un **tutor interactivo y desafiante**, guiando a los usuarios a trav√©s del dominio de los √Årboles de Decisi√≥n mediante un **juego de preguntas adaptativo**. Aunque el entorno inicial sea "para ni√±os", tu lenguaje y la complejidad de las preguntas deben ajustarse rigurosamente al nivel actual del usuario, alcanzando un tono y contenido de **nivel universitario/bootcamp** para los usuarios m√°s avanzados.

**TU √öNICO TRABAJO es generar preguntas y respuestas en un formato espec√≠fico y estricto, y NADA M√ÅS.**
**¬°Es CR√çTICO que tus preguntas sean MUY VARIADAS, CREATIVAS Y NO REPETITIVAS! Evita patrones de preguntas obvios o que sigan la misma estructura.**

**Cuando te pida una pregunta, responde EXCLUSIVAMENTE con el siguiente formato, y NADA M√ÅS:**
Pregunta: [Tu pregunta aqu√≠]
A) [Opci√≥n A]
B) [Opci√≥n B]
C) [Opci√≥n C]
RespuestaCorrecta: [A, B o C]

**Cuando te pida feedback, responde EXCLUSIVAMENTE con el siguiente formato, y NADA M√ÅS:**
[Mensaje de Correcto/Incorrecto, ej: "¬°An√°lisis impecable! Has optimizado tu modelo de conocimiento." o "Revisa tu algoritmo. Esa no era la decisi√≥n √≥ptima."]
[Breve explicaci√≥n del concepto, adecuada al nivel del usuario, ej: "Un √°rbol de decisi√≥n particiona el espacio de caracter√≠sticas..."]
[Pregunta para continuar, ej: "¬øListo para el siguiente desaf√≠o en el √°mbito de los clasificadores?" o "¬øQuieres profundizar m√°s en la teor√≠a de la informaci√≥n aplicada a los √°rboles?"]

**Reglas adicionales para el Experto en √Årboles de Decisi√≥n:**
* **Enfoque Riguroso en √Årboles de Decisi√≥n:** Todas tus preguntas y explicaciones deben girar en torno a los √Årboles de Decisi√≥n. Cubre sus fundamentos (nodos, ramas, hojas, atributos), algoritmos de construcci√≥n (ID3, C4.5, CART), m√©tricas de divisi√≥n (ganancia de informaci√≥n, impureza Gini), sobreajuste (overfitting), poda (pruning), y su aplicaci√≥n en clasificaci√≥n y regresi√≥n.
* **¬°VARIEDAD, VARIEDAD, VARIEDAD!** Aseg√∫rate de que cada pregunta sea diferente en su formulaci√≥n, el ejemplo que utiliza y el concepto espec√≠fico de √Årboles de Decisi√≥n que eval√∫a. Rota entre los siguientes subtemas, asegurando una cobertura amplia y equilibrada:
    * **Concepto General y Usos:** Definici√≥n, casos de uso (clasificaci√≥n, regresi√≥n), ventajas (interpretabilidad).
    * **Estructura del √Årbol:** Nodos (ra√≠z, internos, hoja), ramas, condiciones de divisi√≥n (splits), atributos.
    * **Algoritmos de Construcci√≥n:** Principios de ID3, C4.5, CART.
    * **M√©tricas de Impureza/Ganancia:** Entrop√≠a, Ganancia de Informaci√≥n, Impureza Gini (qu√© miden y por qu√© se usan).
    * **Proceso de Decisi√≥n y Clasificaci√≥n:** C√≥mo un dato atraviesa el √°rbol hasta una clase o valor.
    * **Preprocesamiento y Datos:** Manejo de variables categ√≥ricas/num√©ricas, valores perdidos.
    * **Sobreajuste y Poda:** Qu√© es el overfitting en √°rboles, m√©todos de poda (pre-pruning, post-pruning).
    * **Ensembles (Introducci√≥n):** Breve menci√≥n de Random Forests o Gradient Boosting como extensiones.
    * **Ventajas y Desventajas:** Robustez, sesgo, varianza, estabilidad.

* **Progreso de Dificultad y Tono (Crucial):** El usuario ha respondido {st.session_state.tree_correct_streak} preguntas correctas consecutivas.
    * **Nivel 1 (Aprendiz ‚Äì 0-2 respuestas correctas):** Tono introductorio, analog√≠as simples. Preguntas sobre la funci√≥n b√°sica de un √°rbol de decisi√≥n (tomar decisiones secuenciales). Ejemplos muy claros y conceptuales.
        * *Tono:* "Eres un explorador que empieza a entender el mapa de decisiones."
    * **Nivel 2 (Desarrollador Junior ‚Äì 3-5 respuestas correctas):** Tono m√°s t√©cnico. Introduce conceptos como nodos, ramas y hojas, pero de forma directa. Preguntas sobre la estructura y el flujo de decisi√≥n.
        * *Tono:* "Has completado tu primer sprint de modelado de datos."
    * **Nivel 3 (Cient√≠fico de Datos ‚Äì 6-8 respuestas correctas):** Tono de **nivel universitario/bootcamp**. Introduce m√©tricas de impureza (sin entrar en f√≥rmulas complejas inicialmente), sobreajuste, y c√≥mo el √°rbol "aprende". Preguntas que requieren una comprensi√≥n m√°s profunda de los mecanismos internos y desaf√≠os.
        * *Tono:* "Tu an√°lisis demuestra una comprensi√≥n s√≥lida de los algoritmos de clasificaci√≥n."
    * **Nivel Maestro (Experto en ML ‚Äì 9+ respuestas correctas):** Tono de **especialista en Machine Learning**. Preguntas sobre algoritmos espec√≠ficos (ID3 vs CART), poda, manejo de datos complejos, sesgos, o la base intuitiva de la entrop√≠a/ganancia de informaci√≥n. Se esperan respuestas que demuestren una comprensi√≥n te√≥rica y pr√°ctica robusta.
        * *Tono:* "Tu maestr√≠a en el dise√±o de modelos predictivos es excepcional. Est√°s listo para enfrentar cualquier conjunto de datos."
    * Si el usuario responde 3 preguntas bien consecutivas, la dificultad sube GRADUALMENTE.
    * Si falla una pregunta, el contador se resetea a 0 y la dificultad vuelve al Nivel 1.
    * Si subes de nivel, ¬°aseg√∫rate de felicitar al usuario de forma entusiasta y explicando a qu√© tipo de nivel ha llegado!

* **Ejemplos y Analog√≠as (Adaptadas al Nivel):**
    * **Nivel 1:** Un diagrama de flujo para organizar juguetes.
    * **Nivel 2:** Un algoritmo para clasificar correos electr√≥nicos como spam/no spam.
    * **Nivel 3:** Un modelo para predecir la propensi√≥n de un cliente a comprar un producto, analizando atributos demogr√°ficos y de comportamiento.
    * **Nivel Maestro:** La optimizaci√≥n de un √°rbol de decisi√≥n para un problema de diagn√≥stico m√©dico, considerando la interpretabilidad y la robustez frente a datos ruidosos.

* **Un Turno a la Vez:** Haz solo una pregunta a la vez y espera la respuesta del usuario antes de hacer la siguiente.
* **S√© motivador y profesional:** Usa un tono que incite al aprendizaje y al rigor t√©cnico, adaptado al nivel de cada etapa.
* **Siempre responde en espa√±ol de Espa√±a.**
* **La pregunta debe ser MUY VARIADA Y CREATIVA** sobre los √ÅRBOLES DE DECISI√ìN, y aseg√∫rate de que no se parezca a las anteriores.
"""

# Funci√≥n para parsear la respuesta de la IA (extraer pregunta, opciones y respuesta correcta)
def parse_tree_question_response(raw_text):
    question = ""
    options = {}
    correct_answer_key = ""
    lines = raw_text.split('\n')
    for line in lines:
        line = line.strip()
        if line.lower().startswith("pregunta:"):
            question = line[len("pregunta:"):].strip()
        elif line.lower().startswith("a)"):
            options['A'] = line[len("a):"):].strip()
        elif line.lower().startswith("b)"):
            options['B'] = line[len("b):"):].strip()
        elif line.lower().startswith("c)"):
            options['C'] = line[len("c):"):].strip()
        elif line.lower().startswith("respuestacorrecta:"):
            correct_answer_key = line[len("respuestacorrecta:"):].strip().upper()
    if not (question and len(options) == 3 and correct_answer_key in options):
        st.warning(f"DEBUG: Formato de pregunta inesperado de la API. Texto recibido:\n{raw_text}")
        return None, {}, ""
    return question, options, correct_answer_key

# Funci√≥n para parsear la respuesta de feedback de la IA
def parse_tree_feedback_response(raw_text):
    lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
    if len(lines) >= 3:
        return lines[0], lines[1], lines[2]
    st.warning(f"DEBUG: Formato de feedback inesperado de la API. Texto recibido:\n{raw_text}")
    return "Respuesta procesada.", "Aqu√≠ tienes la explicaci√≥n.", "¬øQuieres otra pregunta?"

# --- Funciones para subir de nivel directamente ---
def set_arbolin_tree_level(target_streak, level_name):
    st.session_state.tree_correct_streak = target_streak
    st.session_state.tree_game_active = True
    st.session_state.tree_game_messages = []
    st.session_state.tree_current_question = None
    st.session_state.tree_current_options = {}
    st.session_state.tree_correct_answer = None
    st.session_state.tree_game_needs_new_question = True
    st.session_state.tree_awaiting_next_game_decision = False
    st.session_state.tree_game_messages.append({"role": "assistant", "content": f"¬°Hola! ¬°Has saltado directamente al **Nivel {level_name}** de Arbol√≠n! Prep√°rate para preguntas m√°s desafiantes sobre los √Årboles de Decisi√≥n. ¬°Aqu√≠ va tu primera!"})
    st.rerun()

# Botones para iniciar o reiniciar el juego y subir de nivel
col_game_buttons_arbolin_tree, col_level_up_buttons_arbolin_tree = st.columns([1, 2])

with col_game_buttons_arbolin_tree:
    if st.button("¬°Vamos a jugar con Arbol√≠n!", key="start_arbolin_tree_game_button"):
        st.session_state.tree_game_active = True
        st.session_state.tree_game_messages = []
        st.session_state.tree_current_question = None
        st.session_state.tree_current_options = {}
        st.session_state.tree_correct_answer = None
        st.session_state.tree_game_needs_new_question = True
        st.session_state.tree_awaiting_next_game_decision = False
        st.session_state.tree_correct_streak = 0
        st.session_state.last_played_question_arbolin_tree = None
        st.rerun()
        
with col_level_up_buttons_arbolin_tree:
    st.markdown("<p style='font-size: 1.1em; font-weight: bold;'>¬øYa eres un experto en decisiones? ¬°Salta de nivel! üëá</p>", unsafe_allow_html=True)
    col_lvl1_arbolin_tree, col_lvl2_arbolin_tree, col_lvl3_arbolin_tree = st.columns(3) # Tres columnas para los botones de nivel
    with col_lvl1_arbolin_tree:
        if st.button("Subir a Nivel Medio (Arbol√≠n - Explorador)", key="level_up_medium_arbolin_tree"):
            set_arbolin_tree_level(3, "Medio") # 3 respuestas correctas para Nivel Medio
    with col_lvl2_arbolin_tree:
        if st.button("Subir a Nivel Avanzado (Arbol√≠n - Guardi√°n)", key="level_up_advanced_arbolin_tree"):
            set_arbolin_tree_level(6, "Avanzado") # 6 respuestas correctas para Nivel Avanzado
    with col_lvl3_arbolin_tree:
        if st.button("üëë ¬°Maestro de Decisiones! (Arbol√≠n)", key="level_up_champion_arbolin_tree"):
            set_arbolin_tree_level(9, "Campe√≥n") # 9 respuestas correctas para Nivel Campe√≥n


# Mostrar mensajes del juego del chatbot
for message in st.session_state.tree_game_messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# L√≥gica del juego del chatbot si est√° activo
if st.session_state.tree_game_active:
    if st.session_state.tree_current_question is None and st.session_state.tree_game_needs_new_question and not st.session_state.tree_awaiting_next_game_decision:
        with st.spinner("Arbol√≠n est√° preparando una pregunta sobre √°rboles de decisi√≥n..."):
            try:
                # Ensure 'client' is defined if you uncomment this block
                if 'client' not in st.session_state or st.session_state.client is None:
                    st.error("Error: OpenAI client not initialized. Please ensure your API key is set.")
                    st.session_state.tree_game_active = False
                    st.rerun()
                    
                client = st.session_state.client # Assuming client is stored in session_state for access

                game_messages_for_api = [{"role": "system", "content": arbolin_tree_game_system_prompt}]
                if st.session_state.tree_game_messages:
                    last_message = st.session_state.tree_game_messages[-1]
                    if last_message["role"] == "user":
                        game_messages_for_api.append({"role": "user", "content": f"MI RESPUESTA: {last_message['content']}"})
                    elif last_message["role"] == "assistant":
                        game_messages_for_api.append({"role": "assistant", "content": last_message['content']})

                game_messages_for_api.append({"role": "user", "content": "Genera una **nueva pregunta** sobre QU√â SON LOS √ÅRBOLES DE DECISI√ìN siguiendo el formato exacto. ¬°Recuerda, la pregunta debe ser muy VARIADA y CREATIVA, y no se debe parecer a las anteriores!"})

                game_response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=game_messages_for_api,
                    temperature=0.8,
                    max_tokens=300
                )
                raw_tree_question_text = game_response.choices[0].message.content
                question, options, correct_answer_key = parse_tree_question_response(raw_tree_question_text)

                if question:
                    st.session_state.tree_current_question = question
                    st.session_state.tree_current_options = options
                    st.session_state.tree_correct_answer = correct_answer_key

                    display_question_text = f"**Nivel {int(st.session_state.tree_correct_streak / 3) + 1} - Aciertos consecutivos: {st.session_state.tree_correct_streak}**\n\n**Pregunta de Arbol√≠n:** {question}\n\n"
                    for key in sorted(options.keys()):
                        display_question_text += f"{key}) {options[key]}\n"

                    st.session_state.tree_game_messages.append({"role": "assistant", "content": display_question_text})
                    st.session_state.tree_game_needs_new_question = False
                    st.rerun()
                else:
                    st.session_state.tree_game_messages.append({"role": "assistant", "content": "¬°Lo siento! Arbol√≠n no pudo preparar la pregunta en el formato correcto. ¬øPuedes pulsar 'VAMOS A JUGAR' de nuevo?"})
                    st.session_state.tree_game_active = False
                    st.rerun()

            except Exception as e:
                st.error(f"¬°Oops! Arbol√≠n no pudo hacer la pregunta. Error: {e}")
                st.session_state.tree_game_messages.append({"role": "assistant", "content": "¬°Lo siento! Arbol√≠n tiene un peque√±o problema para hacer preguntas ahora. ¬øPuedes intentarlo de nuevo?"})
                st.session_state.tree_game_active = False
                st.rerun()


    if st.session_state.tree_current_question is not None and not st.session_state.tree_awaiting_next_game_decision:
        # Audio de la pregunta
        if st.session_state.get('last_played_question_arbolin_tree') != st.session_state.tree_current_question:
            try:
                tts_text = f"Nivel {int(st.session_state.tree_correct_streak / 3) + 1}. Aciertos consecutivos: {st.session_state.tree_correct_streak}. Pregunta de Arbol√≠n: {st.session_state.tree_current_question}. Opci√≥n A: {st.session_state.tree_current_options.get('A', '')}. Opci√≥n B: {st.session_state.tree_current_options.get('B', '')}. Opci√≥n C: {st.session_state.tree_current_options.get('C', '')}."
                tts = gTTS(text=tts_text, lang='es', slow=False)
                audio_fp = io.BytesIO()
                tts.write_to_fp(audio_fp)
                audio_fp.seek(0)
                st.audio(audio_fp, format="audio/mp3", start_time=0, autoplay=True)
                st.session_state.last_played_question_arbolin_tree = st.session_state.tree_current_question
            except Exception as e:
                st.error(f"Error al generar o reproducir el audio de la pregunta: {e}")


        with st.form("arbolin_tree_game_form", clear_on_submit=True):
            radio_placeholder = st.empty()
            with radio_placeholder.container():
                st.markdown("Elige tu respuesta:")
                user_choice = st.radio(
                    "Elige tu respuesta:",
                    options=list(st.session_state.tree_current_options.keys()),
                    format_func=lambda x: f"{x}) {st.session_state.tree_current_options[x]}",
                    key="tree_answer_radio_buttons",
                    label_visibility="collapsed"
                )

            submit_button = st.form_submit_button("Enviar Respuesta")

        if submit_button:
            st.session_state.tree_game_messages.append({"role": "user", "content": f"MI RESPUESTA: {user_choice}) {st.session_state.tree_current_options[user_choice]}"})
            prev_streak = st.session_state.tree_correct_streak

            # L√≥gica para actualizar el contador de respuestas correctas
            if user_choice == st.session_state.tree_correct_answer:
                st.session_state.tree_correct_streak += 1
            else:
                st.session_state.tree_correct_streak = 0

            radio_placeholder.empty()

            # --- L√≥gica de subida de nivel ---
            if st.session_state.tree_correct_streak > 0 and \
               st.session_state.tree_correct_streak % 3 == 0 and \
               st.session_state.tree_correct_streak > prev_streak:
                
                if st.session_state.tree_correct_streak < 9: # Niveles B√°sico, Medio, Avanzado
                    current_level_text = ""
                    if st.session_state.tree_correct_streak == 3:
                        current_level_text = "Medio (como un adolescente que ya entiende de l√≥gica de decisiones)"
                    elif st.session_state.tree_correct_streak == 6:
                        current_level_text = "Avanzado (como un Data Scientist junior)"
                    
                    level_up_message = f"üéâ ¬°Incre√≠ble! ¬°Has respondido {st.session_state.tree_correct_streak} preguntas seguidas correctamente! ¬°Felicidades! Has subido al **Nivel {current_level_text}** de √Årboles de Decisi√≥n. ¬°Las preguntas ser√°n un poco m√°s desafiantes ahora! ¬°Eres un/a verdadero/a explorador/a de decisiones! üöÄ"
                    st.session_state.tree_game_messages.append({"role": "assistant", "content": level_up_message})
                    st.balloons()
                    # Generar audio para el mensaje de subida de nivel
                    try:
                        tts_level_up = gTTS(text=level_up_message, lang='es', slow=False)
                        audio_fp_level_up = io.BytesIO()
                        tts_level_up.write_to_fp(audio_fp_level_up)
                        audio_fp_level_up.seek(0)
                        st.audio(audio_fp_level_up, format="audio/mp3", start_time=0, autoplay=True)
                        time.sleep(2)
                    except Exception as e:
                        st.warning(f"No se pudo reproducir el audio de subida de nivel: {e}")
                elif st.session_state.tree_correct_streak >= 9:
                    medals_earned = (st.session_state.tree_correct_streak - 6) // 3 
                    medal_message = f"üèÖ ¬°FELICITACIONES, MAESTRO DE DECISIONES! ¬°Has ganado tu {medals_earned}¬™ Medalla del √Årbol! ¬°Tu habilidad para seguir los caminos correctos es asombrosa y digna de un verdadero EXPERTO en √Årboles de Decisi√≥n! ¬°Sigue as√≠! üåü"
                    st.session_state.tree_game_messages.append({"role": "assistant", "content": medal_message})
                    st.balloons()
                    st.snow()
                    try:
                        tts_medal = gTTS(text=medal_message, lang='es', slow=False)
                        audio_fp_medal = io.BytesIO()
                        tts_medal.write_to_fp(audio_fp_medal)
                        audio_fp_medal.seek(0)
                        st.audio(audio_fp_medal, format="audio/mp3", start_time=0, autoplay=True)
                        time.sleep(3)
                    except Exception as e:
                        st.warning(f"No se pudo reproducir el audio de medalla: {e}")
                    
                    if prev_streak < 9:
                        level_up_message_champion = f"¬°Has desbloqueado el **Nivel Campe√≥n (Maestro de Decisiones)**! ¬°Las preguntas ahora son solo para los verdaderos genios y futuros cient√≠ficos de datos que entienden los secretos de las decisiones algor√≠tmicas! ¬°Adelante!"
                        st.session_state.tree_game_messages.append({"role": "assistant", "content": level_up_message_champion})
                        try:
                            tts_level_up_champion = gTTS(text=level_up_message_champion, lang='es', slow=False)
                            audio_fp_level_up_champion = io.BytesIO()
                            tts_level_up_champion.write_to_fp(audio_fp_level_up_champion) 
                            audio_fp_level_up_champion.seek(0)
                            st.audio(audio_fp_level_up_champion, format="audio/mp3", start_time=0, autoplay=True)
                            time.sleep(2)
                        except Exception as e:
                            st.warning(f"No se pudo reproducir el audio de campe√≥n: {e}")


            # Generar feedback de Arbol√≠n
            with st.spinner("Arbol√≠n est√° revisando tu respuesta..."):
                try:
                    # Ensure 'client' is defined if you uncomment this block
                    if 'client' not in st.session_state or st.session_state.client is None:
                        st.error("Error: OpenAI client not initialized. Cannot generate feedback.")
                        st.session_state.tree_game_active = False
                        st.rerun()
                        
                    client = st.session_state.client # Assuming client is stored in session_state

                    feedback_prompt = f"""
                    El usuario respondi√≥ '{user_choice}'. La pregunta era: '{st.session_state.tree_current_question}'.
                    La respuesta correcta era '{st.session_state.tree_correct_answer}'.
                    Da feedback como Arbol√≠n.
                    Si es CORRECTO, el mensaje es "¬°Decisi√≥n acertada! ¬°Has elegido bien el camino!" o similar.
                    Si es INCORRECTO, el mensaje es "¬°Oh, ese camino no era el correcto! ¬°No te preocupes, hay m√°s ramas!" o similar.
                    Luego, una explicaci√≥n sencilla para ni√±os y adolescentes.
                    Finalmente, pregunta: "¬øQuieres seguir explorando el bosque de decisiones?".
                    **Sigue el formato estricto de feedback que tienes en tus instrucciones de sistema.**
                    """
                    feedback_response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[
                            {"role": "system", "content": arbolin_tree_game_system_prompt},
                            {"role": "user", "content": feedback_prompt}
                        ],
                        temperature=0.8,
                        max_tokens=300
                    )
                    raw_arbolin_tree_feedback_text = feedback_response.choices[0].message.content

                    feedback_msg, explanation_msg, next_question_prompt = parse_tree_feedback_response(raw_arbolin_tree_feedback_text)

                    st.session_state.tree_game_messages.append({"role": "assistant", "content": feedback_msg})
                    st.session_state.tree_game_messages.append({"role": "assistant", "content": explanation_msg})
                    st.session_state.tree_game_messages.append({"role": "assistant", "content": next_question_prompt})

                    try:
                        tts = gTTS(text=f"{feedback_msg}. {explanation_msg}. {next_question_prompt}", lang='es', slow=False)
                        audio_fp = io.BytesIO()
                        tts.write_to_fp(audio_fp)
                        audio_fp.seek(0)
                        st.audio(audio_fp, format="audio/mp3", start_time=0, autoplay=True)
                    except Exception as e:
                        st.warning(f"No se pudo reproducir el audio de feedback: {e}")


                    st.session_state.tree_current_question = None
                    st.session_state.tree_current_options = {}
                    st.session_state.tree_correct_answer = None
                    st.session_state.tree_game_needs_new_question = False
                    st.session_state.tree_awaiting_next_game_decision = True

                    st.rerun()

                except Exception as e:
                    st.error(f"Ups, Arbol√≠n no pudo procesar tu respuesta. Error: {e}")
                    st.session_state.tree_game_messages.append({"role": "assistant", "content": "Lo siento, Arbol√≠n tiene un peque√±o problema t√©cnico ahora mismo. ¬°Pero me encantar√≠a ver tu respuesta!"})


    if st.session_state.tree_awaiting_next_game_decision:
        st.markdown("---")
        st.markdown("¬øQu√© quieres hacer ahora?")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëç S√≠, quiero jugar m√°s preguntas", key="play_more_questions_tree"):
                st.session_state.tree_game_needs_new_question = True
                st.session_state.tree_awaiting_next_game_decision = False
                st.session_state.tree_game_messages.append({"role": "assistant", "content": "¬°Genial! ¬°Aqu√≠ va tu siguiente desaf√≠o en el bosque de decisiones!"})
                st.rerun()
        with col2:
            if st.button("üëé No, ya no quiero jugar m√°s", key="stop_playing_tree"):
                st.session_state.tree_game_active = False
                st.session_state.tree_awaiting_next_game_decision = False
                st.session_state.tree_game_messages.append({"role": "assistant", "content": "¬°De acuerdo! ¬°Gracias por explorar el bosque de decisiones conmigo! Espero que hayas aprendido mucho. ¬°Hasta la pr√≥xima decisi√≥n!"})
                st.rerun()

else: 
    if 'client' not in st.session_state or st.session_state.client is None: # Changed condition to check st.session_state.client
        st.info("Para usar la secci√≥n de preguntas de Arbol√≠n, necesitas configurar tu clave de API de OpenAI en `secrets.toml`.")